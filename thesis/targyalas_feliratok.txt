4. Feliratok kezelése
A feliratok megjelenítése az alkalmazás magját alkotó funkciók közé sorolható, hiszen enélkül maga a nyelvtanulási folyamat nehezen lenne megvalósítható. Tehát e lehetõség használhatósága kulcsfontosságú a projekt tekintetében. Ennek a mûködését, implementálását bemutató fejezet logikailag két részre osztható: az .srt kiterjesztésû fájlok beolvasása, kezelése, illetve a feliratok képernyõre történõ kirajzolása.
4.1 Feliratfájlok beolvasása
Ahhoz, hogy a szoftver képes legyen feliratokat megjeleníteni, tudnia kell azokat a felhasználó számítógépérõl felolvasni, kezelni. Az alkalmazás jelenleg csak a SubRip, azaz .srt kiterjesztésû fájlok kezelését támogatja, mivel az említett formátum a legelterjedtebb típusok közé sorolható. Elõállításuk, interneten való fellelésük rendkívül könnyû, gyors, emiatt nagy népszerûségnek örvend mind a felirat elkészítõi, mind a felirat használói közt. Strukturális felépítése egyszerû:  
A fájl blokkokra osztható, amelyek egy-egy megjelenítendõ feliratrészletnek felelnek meg. Minden ilyen rész elsõ sorában egy sorszám található. Ezek a részletek azonosítására szolgálnak. A következõ sorban a kezdõ-, illetve a végidõpontok helyezkednek el, közöttük egy szigorúan „-->” alakú nyíllal, elõtte és utána szóközökkel határolva. Az idõpontokat konvenció szerint óra:perc:másodperc,ezredmásodperc formátumban kötelezõ megadni. Ezután a vászonra kirajzolandó sorok találhatóak. Itt fontos megemlíteni, hogy a fájl érzékeny a sortörésekre, hiszen ezek alapján tesz különbséget a más-más sorokba kerülõ szöveget között. A szöveg sora(i) után legalább egy üres sornak kell szerepelnie. Amennyiben ez hiányzik, a következõ blokk az elõzõ szövegrészébe kerül.
A feliratfájlok kezeléséért az srt package-ben található Java osztályok felelõsek. A fõ funkcionalitásokat, azaz a feliratok beolvasását, feldolgozását az SRTReader.java nevû osztály végzi az itt található a read, illetve a parse metódusok segítségével. Az elõbbi egy File objektumot vár, amit a soronként dolgoz fel, és minden soron alkalmazza a parse metódust, ami egy TreeSet-hez adja hozzá a feldolgozott blokkoknak megfelelõ Java objektumokat. Ezt a funkciót megvalósító kódrészlet:
public static SRTInfo read(File srtFile) throws InvalidSRTException, SRTReaderException {
    if (!srtFile.exists()) {
        throw new SRTReaderException(srtFile.getAbsolutePath() + " does not exist");
    }
    if (!srtFile.isFile()) {
        throw new SRTReaderException(srtFile.getAbsolutePath() + " is not a regular file");
    }

    SRTInfo srtInfo = new SRTInfo();
    try (BufferedReader br = new BufferedReader(new InputStreamReader(
            new FileInputStream(srtFile), StandardCharsets.UTF_8))) {
        BufferedLineReader reader = new BufferedLineReader(br);
        while (true) {
            srtInfo.add(parse(reader));
        }
    } catch (EOFException e) {
    } catch (IOException e) {
        throw new SRTReaderException(e);
    }
    
    return srtInfo;
}
  A függvény képes kivételek kezelésére is. Amennyiben az átadott fájl nem létezik, például végrehajtás közben törölték, illetve, ha a fájl nem reguláris fájl, azaz nem fájlrendszerben tárolt bájtok sorozata, az alkalmazás errõl megfelelõ hibaüzenetet továbbít.
4.2 Feliratok megjelenítése
Mivel a feliratokat tartalmazó fájlokat az alkalmazás már be tudja olvasni, valamint képes azok kezelésére, a soron következõ megvalósítandó funkció ezen feliratok képernyõn történõ megjelenítése, olyan módon, ahogyan az egy általános videólejátszó szoftvertõl elvárható. Fontos szempont tehát az idõzítés, illetve a feliratok megfelelõ formátumú kirajzolása. Ezen felül követelmény az is, hogy a megjelenõ feliratokra kattintva láthatóak legyen az elérhetõ fordítások is. Ugyan a vlcj függvénykönyvtárában található metódus, amely a feliratfájlok beállítását végzi, de mivel e funkció implementációja teljesen rejtett a java-s környezet elõl, így nem volta arra lehetõség, hogy az egyes kirajzolt mondatrészekhez olyan figyelõt rendeljek, amely az egér kattintásait elemzi. Emiatt saját feliratmegjelenítõ komponenst kellett létrehozni, ami segítségével kattintásra elkérhetõ a szóból alkotott String objektum, így majd a fordítás is megvalósulhat. A funkcióért a SubtitleOverlay osztály felelõs, amely elkészíti a megjelenítendõ szöveget, és ki is rajzolja azt. Ennek megvalósítását a paint függvény hajtja végre:
@Override
public void paint(Graphics g) {
   super.paint(g);

   g.clearRect(0, 0, this.getWidth(), this.getHeight());

   Graphics2D g2 = (Graphics2D) g;
   g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

   g2.setFont(new Font("Serif", Font.PLAIN, fontSize));
   g2.setColor(new Color(255, 255, 255));

   if(actSubtitle == null) {
      return;
   }
   
   calculateSubtitleBoundingBox(g2, actSubtitle);

   for (Entry<String, Rectangle2D> box : boundingBoxes) {
      g2.drawString(box.getKey(), (int)box.getValue().getX(), (int)(box.getValue().getY()+box.getValue().getHeight()));
   }

}
A kattintásra történõ szöveg visszaadásának megvalósítása az egyes szavakat befoglaló kattintható, láthatatlan téglalapok segítségével történik. Az antialiasing, betûtípus, valamint a betûszín beállítása után a meghívott calculateSubtitleBoundingBox végzi el a mondatelemek köré szánt négyszögek kiszámítását. A szavak, valamint az õket körül vevõ téglalapok egy kulcs-érték párokat tároló Map-be kerülnek. A map elemeit alkalmazás a kattintás pozíciójának vizsgálatakor elemzi, és amennyiben a kattintás valamely map-ben fellelhetõ négyszög területén belülre esik, a szoftver visszaadja a hozzá tartozó kulcsot, jelen esetben a String objektumot, amely a kattintott mondatelemet tartalmazza. Így tehát lehetõség nyílik a felhasználó egérrel történõ kattintásait nyomon követni, és ennek megfelelõen elvégezni a szükséges fordítást. A kód minimális módosításával megjeleníthetõk a befoglaló téglalapok, így jól látható, hogy a szoftver mely területekre figyel a felhasználó kattintásai során. (KÉP IDE: subtitle_boxes, A befoglaló négyszögek megjelenítve a szavak körül)
A bemutatott két funkció alkalmazásba történõ implementálásával lehetõség nyílt arra, hogy a felhasználó interakcióit a szoftver dinamikusan, a film lejátszása közben kezelje, illetve ennek alapján megfelelõ fordításokat végezzen beépített fordító API segítségével.
