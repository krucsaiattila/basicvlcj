A alábbi fejelzetben az elkészült alkalmazás fõbb funkcióit mutatom be, fejtem ki részletesen, külön kitérve a fontosabb, érdekesebb részekre.

1. Videólejátszó alapfunkciók
A szoftver alapját, magját adó komponens a VLC java-n alapuló keretrendszer segítségével valósult meg. Elsõ lépésként a VLC video lejátszó megfelelõ operációs rendszerre való feltelepítése szükséges. Windows esetén lehet 32 illetve 64 bites verzió. E lépést kötelezõ megtenni, mivel az fejlesztett alkalmazás a VLC lejátszó funkcióit veszi igénybe, nélküle a szoftver nem mûködik. Ezután a vlcj nevû open source projektet vettem igénybe. Ez Java könyvtárakat ad a VLC média lejátszóhoz, így annak majdnem az összes natív funkciója elérhetõvé válik a LibVLC-n keresztül. Ezen kívül egy keretrendszer használatát is elérhetõvé teszi, amely egy egyszerû, magas szintû programozási modelt biztosít, ami magába foglalja a natív könytárakhoz való hozzáférést. E keretrendszer amennyire csak lehetséges megvédi a felhasználóját az eredeti könyvár helytelen használatától, ami akár a fejlesztett alkalmazás összeomlását is okozhatja. Segítségével a fejlesztés magas szinten történhetett. Néhány Java osztály, például a main-t tartalmazó, valamint az alsó kezelõpanelt tartalmazó elõre el volt készítve, azok módosítására volt csak szükség. Az alkalmazás elindítása után egy egyszerû videó lejátszó kezelõfelülete tárul elénk.  (KÉPALÁÍRÁS)
A képernyõ bal alsó sarkában találhatóak meg a videó lejátszását szabályozó gombok. Ezek rendre az elõzõ fejezet, visszatekerés, megállítás, pillanatmegállítás, indítás, elõre tekerés, valamint következõ fejezet. Középen egy csúszka kapott helyet, amely a hangerõszabályozást teszi lehetõvé. Ettõl jobbra találhatóak a némító, képernyõfelvétel, médiaválasztó, teljes képernyõ, felirat választó, fordítás nyelve, illetve az online feliratok gombok. Ezek mûködésérõl késõbbi fejezetekben írok részletesen. Feljebb helyezkedik el a keresõsáv, és egy számláló balra, valamint egy jobbra. A bal számláló a lejátszott videó aktuális idõpillanatát jelzi, másodperces pontossággal. A csúszka segítségével egyszerûen, intuitvan tekerhetünk a videóban. A jobboldali számláló az aktuális fejezetet mutatja. Az alkalmazás felsõ részén a menüsáv található, rajta öt különbözõ menüponttal. Az elsõsegítségével médiafájlokat tallózhatunk, illetve kiléphetünk a szoftverbõl. A második lehetõség egy segítség opció, a harmadik az ellenõrzõ kvíz kitöltését teszi lehetõvé. A „generate” menüt kibontva PDF fájlt generálhatunk az általunk ismeretlennek vélt szavakból. Felül az utolsó lehetõség a beûllítások menüpont, ahol a felirat méretét, illetve késleltetését állíthatjuk be milliszekundumos pontossággal. Ezek áttekintése után már tudunk média fájlokat hozzáadni a szoftverhez. Ehhez kattintsunk az „Eject” gombra az alsó panelrõl, vagy válasszuk a „Media”, „Play File…” menütpontot. Ekkor megnyítik a felhasználó elõtt egy tallózó ablak, ahol böngészhetünk a saját fájlrendszerünkben. Alap beállítás szerint csak a média fájlok jelennek meg az ablakban, azonban ez bármikor felülírható. Itt lehetõség van keresésre, részletes, vagy listás megjelenítésre, feljebb navigálásra, fõoldalra való visszatérésre A szoftver képes rengeteg különbözõ kódolású videó-, és hangfájl lejátszására. Kilépésre a „Cancel” gomb megnyomásával van lehetõség. Ha megtaláltuk a nekünk megfelelõ fájlt, a „Play” gombra való kattintással kezdhetjük el a lejátszást. Az ablakot bármikor átméretezhetjük, amivel a benne lejátszott tartalom is méretet vált, fekete sávokkal kitöltve a képaránynak nem megfelelõ részeket. Lehetõségünk van a lejátszó némítására, a „Toggle Mute” gombra való kattintással. Ezzel egyidõben a gomb ikonja is a megfelelõ állapotba vált, jelenzvén ezzel, hogy a lejátszás le van-e némítva, vagy sem. Az ezt megvalósító kódrészlet:
toggleMuteButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        mediaPlayer.mute();
        if(mediaPlayer.isMute()){
            toggleMuteButton.setIcon(new ImageIcon(getClass().getClassLoader().getResource("icons/sound.png")));
        } else {
            toggleMuteButton.setIcon(new ImageIcon(getClass().getClassLoader().getResource("icons/sound_mute.png")));
        }
    }
});
